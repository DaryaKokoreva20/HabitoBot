from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton
)

from database.models import Habit_templates


goal_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏', callback_data='habits')],
        [InlineKeyboardButton(text='üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å', callback_data='plan')],
        [InlineKeyboardButton(text='üåø –ü–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data='efficiency')],
        [InlineKeyboardButton(text='üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç', callback_data='preview')]
    ]
)

habits_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üî• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data='popular_habits')],
        [InlineKeyboardButton(text='‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É', callback_data='new_habit')]
    ]
)


def build_popular_habits_keyboard(habits: list[Habit_templates], offset: int, limit: int, has_more: bool) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(
            text=f"{habit.emoji} {habit.name}",
            callback_data=f"add_template_{habit.id}"
        )] for habit in habits
    ]

    nav = []
    if offset > 0:
        prev_offset = max(0, offset - limit)
        nav.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                callback_data=f"show_more_habits_{prev_offset}"
            )
        )

    if has_more:
        nav.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë",
                callback_data=f"show_more_habits_{offset + limit}"
            )
        )

    if nav:
        rows.append(nav)

    return InlineKeyboardMarkup(inline_keyboard=rows)


def confirm_add_keyboard(template_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"confirm_add_{template_id}"),
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_add_{template_id}")
        ]
    ])


def edit_habit_keyboard(template_id: int, freq: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å", callback_data=f"edit_freq_{template_id}")],
        [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"edit_remind_{template_id}")],
    ]
    if freq in ("weekly", "custom"):
        rows.insert(1, [InlineKeyboardButton(text="üóìÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data=f"edit_days_of_week_{template_id}")])

    rows.append([
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_habit_{template_id}"),
        InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_add_{template_id}")
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def choose_frequency_keyboard(template_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üïí –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data=f"set_freq_{template_id}_hourly"),
            InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data=f"set_freq_{template_id}_daily"),
        ],
        [
            InlineKeyboardButton(text="üóìÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data=f"set_freq_{template_id}_weekly"),
            InlineKeyboardButton(text="‚öôÔ∏è –î—Ä—É–≥–æ–µ", callback_data=f"set_freq_{template_id}_custom"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_edit_{template_id}")]
    ])


WEEKDAYS = [("mon","–ü–Ω"), ("tue","–í—Ç"), ("wed","–°—Ä"), ("thu","–ß—Ç"), ("fri","–ü—Ç"), ("sat","–°–±"), ("sun","–í—Å")]

def days_of_week_keyboard(template_id: int, selected: list[str]) -> InlineKeyboardMarkup:
    grid, row = [], []
    sel = set(selected or [])
    for code, label in WEEKDAYS:
        mark = "‚úÖ" if code in sel else "‚ñ´Ô∏è"
        row.append(InlineKeyboardButton(text=f"{mark} {label}", callback_data=f"toggle_day_{template_id}_{code}"))
        if len(row) == 4:
            grid.append(row); row = []
    if row: grid.append(row)
    grid.append([
        InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"save_days_{template_id}"),
        InlineKeyboardButton(text="–°–±—Ä–æ—Å", callback_data=f"clear_days_{template_id}")
    ])
    grid.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_edit_{template_id}")])
    return InlineKeyboardMarkup(inline_keyboard=grid)
