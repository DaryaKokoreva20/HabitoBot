from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import time
from database.database import SessionLocal

from database.models import User
from database.queries import get_popular_habits, POPULAR_LIMIT
from keyboards import goal_keyboard, habits_keyboard, build_popular_habits_keyboard
from utils.time_utils import parse_time_input


router = Router()


class Register(StatesGroup):
    name = State()
    wake_up = State()
    sleep = State()


@router.message(F.photo)
async def handle_photo(message: Message):
    photo = message.photo[-1]
    file_id = photo.file_id
    await message.answer(f'{file_id}')


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.from_user.id
    
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()

    if user:
        await message.answer('–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!')
        await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å?", reply_markup=goal_keyboard)
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        await state.set_state(Register.name)


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.wake_up)
    await message.answer('–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è?')


@router.message(Register.wake_up)
async def register_wake_up(message: Message, state: FSMContext):
    parsed_time = parse_time_input(message.text, context='wake_up')
    if parsed_time:
        await state.update_data(wake_up=parsed_time.isoformat())
        await state.set_state(Register.sleep)
        await message.answer('–ê –≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å?')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)')


@router.message(Register.sleep)
async def register_sleep(message: Message, state: FSMContext, session: AsyncSession):
    parsed_time = parse_time_input(message.text, context='sleep')
    if parsed_time:
        await state.update_data(sleep=parsed_time.isoformat())
        data = await state.get_data()
        try:
            user = User(
                telegram_id = message.from_user.id,
                name = data['name'],
                wake_up_time = time.fromisoformat(data['wake_up']),
                sleep_time = time.fromisoformat(data['sleep'])
            )
            session.add(user)
            await session.commit()
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
            await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å?", reply_markup=goal_keyboard)
            await state.clear()

        except Exception as e:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')
            print(e)
            await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)')


@router.callback_query(F.data == 'habits')
async def goal_habits(callback: CallbackQuery):
    await callback.answer('–í–∞—à–∞ —Ü–µ–ª—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏')
    await callback.message.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!')
    await callback.message.answer(
        '–•–æ—á–µ—à—å —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?',
        reply_markup=habits_keyboard
    )


@router.callback_query(F.data == 'popular_habits')
async def show_popular_habits(callback: CallbackQuery):
    await callback.answer('–í—ã —Ä–µ—à–∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏')

    text = (
        "‚ú® *–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫:*\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ—ë üëá\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
    )

    async with SessionLocal() as session:
        habits, has_more = await get_popular_habits(session, offset=0, limit=POPULAR_LIMIT)
        keyboard = build_popular_habits_keyboard(habits, offset=0, limit=POPULAR_LIMIT, has_more=has_more)


    await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data.startswith("show_more_habits_"))
async def show_more_popular_habits(callback: CallbackQuery):
    offset = int(callback.data.split("_")[-1])

    text = (
        "‚ú® *–í–æ—Ç –µ—â—ë –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:*\n\n"
        "–í—ã–±–∏—Ä–∞–π –ª—é–±—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üëá"
    )

    async with SessionLocal() as session:
        habits, has_more = await get_popular_habits(session, offset=offset, limit=POPULAR_LIMIT)
        keyboard = build_popular_habits_keyboard(habits, offset=offset, limit=POPULAR_LIMIT, has_more=has_more)

    await callback.message.edit_reply_markup(text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data.startswith("add_template_"))
async def add_habit_template(callback: CallbackQuery):
    pass


@router.callback_query(F.data == 'plan')
async def goal_plan(callback: CallbackQuery):
    await callback.answer('–í–∞—à–∞ —Ü–µ–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å')


@router.callback_query(F.data == 'efficiency')
async def goal_efficiency(callback: CallbackQuery):
    await callback.answer('–í–∞—à–∞ —Ü–µ–ª—å –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')


@router.callback_query(F.data == 'review')
async def goal_review(callback: CallbackQuery):
    await callback.answer('–í—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç')

